// Generated by CoffeeScript 1.10.0
var app, ball, ballMaterial, balls, cen, collisionGroupBalls, collisionGroupObstacles, collisionGroupPlayers, collisionGroupWalls, collisionGroups, cx, d, express, h, http, i, io, j, k, l, len, len1, len2, len3, mapSettings, n, p2, playerMaterial, players, post, postMaterial, randX, randY, ref, ref1, ref2, server, shape, timeStep, w, wallMaterial, walls, world, x, xx, y, yy;

express = require('express');

app = express();

http = require('http');

server = http.createServer(app);

io = require('socket.io')(server);

p2 = require('p2');

app.use(express["static"](__dirname + '/app'));

collisionGroupPlayers = null;

collisionGroupBalls = null;

collisionGroupWalls = null;

collisionGroupObstacles = null;

world = new p2.World({
  gravity: [0, 0]
});

mapSettings = {
  outOfBoundsMargin: 100,
  halfPlayingWidth: 400,
  halfPlayingHeight: 250,
  halfNetHeight: 80,
  netDepth: 40,
  ballRadius: 12,
  playerRadius: 20,
  postRadius: 8,
  shootPower: 350,
  maxAccel: 300,
  shootingAccel: 200
};

x = mapSettings.halfPlayingWidth;

y = mapSettings.halfPlayingHeight;

n = mapSettings.halfNetHeight;

d = mapSettings.netDepth;

w = x + d + mapSettings.outOfBoundsMargin;

h = y + mapSettings.outOfBoundsMargin;

ballMaterial = new p2.Material('ballMaterial');

wallMaterial = new p2.Material('wallMaterial');

playerMaterial = new p2.Material('playerMaterial');

postMaterial = new p2.Material('postMaterial');

walls = new p2.Body({
  mass: 0,
  position: [0, 0]
});

walls.addShape(new p2.Line({
  length: 2 * x
}), [0, y], 0);

walls.addShape(new p2.Line({
  length: 2 * x
}), [0, -y], 0);

len = y - n;

cen = y / 2.0 + n / 2.0;

walls.addShape(new p2.Line({
  length: len
}), [x, cen], Math.PI / 2.0);

walls.addShape(new p2.Line({
  length: len
}), [-x, cen], Math.PI / 2.0);

walls.addShape(new p2.Line({
  length: len
}), [x, -cen], Math.PI / 2.0);

walls.addShape(new p2.Line({
  length: len
}), [-x, -cen], Math.PI / 2.0);

cx = x + n / 2.0;

walls.addShape(new p2.Line({
  length: d
}), [cx, n]);

walls.addShape(new p2.Line({
  length: d
}), [-cx, n]);

walls.addShape(new p2.Line({
  length: d
}), [cx, -n]);

walls.addShape(new p2.Line({
  length: d
}), [-cx, -n]);

walls.addShape(new p2.Line({
  length: 2 * n
}), [x + d, 0], Math.PI / 2.0);

walls.addShape(new p2.Line({
  length: 2 * n
}), [-x - d, 0], Math.PI / 2.0);

collisionGroups = {
  players: 0x0001,
  balls: 0x0002,
  walls: 0x0004,
  obstacles: 0x0008
};

ref = walls.shapes;
for (i = 0, len1 = ref.length; i < len1; i++) {
  shape = ref[i];
  shape.material = wallMaterial;
  shape.collisionGroup = collisionGroups.walls;
  shape.collisionMask = collisionGroups.balls;
}

world.addBody(walls);

world.addContactMaterial(new p2.ContactMaterial(ballMaterial, ballMaterial, {
  restitution: 0.8
}));

world.addContactMaterial(new p2.ContactMaterial(ballMaterial, playerMaterial, {
  restitution: 0.2,
  friction: 0
}));

world.addContactMaterial(new p2.ContactMaterial(ballMaterial, postMaterial, {
  restitution: 0.3
}));

world.addContactMaterial(new p2.ContactMaterial(ballMaterial, wallMaterial, {
  restitution: 0.5
}));

randX = function() {
  return (Math.random() * 2 - 1.0) * x;
};

randY = function() {
  return (Math.random() * 2 - 1.0) * y;
};

balls = [];

players = [];

for (j = 1; j <= 30; j++) {
  ball = new p2.Body({
    position: [randX(), randY()],
    velocity: [(Math.random() * 2 - 1.0) * 500, (Math.random() * 2 - 1.0) * 500],
    mass: 0.3,
    damping: 0.5,
    fixedRotation: true
  });
  ball.addShape(new p2.Circle({
    radius: mapSettings.ballRadius,
    material: ballMaterial,
    collisionGroup: collisionGroups.balls,
    collisionMask: collisionGroups.balls | collisionGroups.walls | collisionGroups.players | collisionGroups.obstacles
  }));
  balls.push(ball);
  world.addBody(ball);
}

ref1 = [-1, 1];
for (k = 0, len2 = ref1.length; k < len2; k++) {
  xx = ref1[k];
  ref2 = [-1, 1];
  for (l = 0, len3 = ref2.length; l < len3; l++) {
    yy = ref2[l];
    post = new p2.Body({
      position: [x * xx, n * yy],
      mass: 0
    });
    post.addShape(new p2.Circle({
      radius: mapSettings.postRadius,
      material: postMaterial,
      collisionGroup: collisionGroups.obstacles,
      collisionMask: collisionGroups.balls | collisionGroups.players
    }));
    world.addBody(post);
  }
}

server.listen(8000);

console.log("Listening on 8000...");

io.on('connection', function(socket) {
  return console.log('a user connected');
});

timeStep = 1 / 60;

setInterval(function() {
  var o, packet;
  world.step(timeStep);
  packet = {
    balls: (function() {
      var len4, m, results;
      results = [];
      for (m = 0, len4 = balls.length; m < len4; m++) {
        o = balls[m];
        results.push({
          id: o.id,
          x: o.position[0],
          y: o.position[1]
        });
      }
      return results;
    })(),
    players: (function() {
      var len4, m, results;
      results = [];
      for (m = 0, len4 = players.length; m < len4; m++) {
        o = players[m];
        results.push({
          id: o.id,
          x: o.position[0],
          y: o.position[1]
        });
      }
      return results;
    })()
  };
  return io.emit('positions', packet);
}, 1000 * timeStep);
